
"----------------
" set Language to en_US
"----------------
language en_US.UTF8

"----------------
" Remap <ESC> to jk 
"----------------
inoremap jk <ESC>

"------------------
" addon vim-plug
"------------------
silent call plug#begin()
  Plug 'itchyny/lightline.vim'
  Plug 'mhinz/vim-startify'
  Plug 'frazrepo/vim-rainbow'
  Plug 'lifepillar/vim-solarized8'
  Plug 'Yggdroot/indentLine'
  Plug 'morhetz/gruvbox'
  Plug 'will133/vim-dirdiff'
  Plug 'neoclide/coc.nvim',  {'branch': 'release'}
  Plug 'unblevable/quick-scope'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
call plug#end()

"------------------
" addon coc-yaml
"------------------
inoremap <silent><expr> <c-p> coc#refresh()
" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
   inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
   inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    else
        call CocAction('doHover')
    endif
endfunction

"--------------------
" replace grep with ripgrep
"--------------------
let s:rg = 'rg' " change this path according to your mount point
if executable(s:rg)
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
  set grepformat=%f:%l:%c:%m,%f:%l:%m
  nnoremap <Leader>g :silent lgrep<Space>
  nnoremap <silent> [f :lprevious<CR>
  nnoremap <silent> ]f :lnext<CR>
endif

"--------------------
" WSL yank support
"--------------------
let s:clip = '/mnt/c/Windows/System32/clip.exe'  " change this path according to your mount point
if executable(s:clip)
    augroup WSLYank
        autocmd!
        autocmd TextYankPost * if v:event.operator ==# 'y' | call system(s:clip, @0) | endif
    augroup END
endif

"--------------------
" WSL yank support
"--------------------
map <silent> "pp :r !powershell.exe -Command Get-Clipboard<CR>
map! <silent> <C-r>p :r !powershell.exe -Command Get-Clipboard<CR>

"------------------
" Allow the usage of nodejs <10.0.x
"------------------
let g:coc_disable_startup_warning = 1

"------------------
" lightline anpassungen
"------------------
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'readonly', 'absolutepath', 'modified' ] ],
      \ },
      \ 'component': {
      \   'lineinfo': "%c:%{line('.') . '/' . line('$')}",
      \ },
      \ }

"------------------
" activate rainbow
"------------------
let g:rainbow_active = 1


"------------------
" startify - Settings
"------------------
let g:startify_bookmarks =[
 \'~/AppData/Local/nvim/init.vim'
 \]

"------------------
" explorer settings
"------------------
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 3
let g:netrw_altv = 1
let g:netrw_winsize = 30

"-----------------
" Fix solar WSL -fill red Problem
"-----------------
set t_ut=""
set nocompatible " not vi compatible

"-----------------
" insert empty line above and underneath
"-----------------
map <Space>o o<ESC>
map <Space>O O<ESC>

"------------------
" send cursor to <nop> - use hjkl 
"------------------
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

"------------------
" fuzz mode
"------------------
set path=$PWD/**        " enable fuzzy finding in the vim command line
set wildmenu            " enable fuzzy menu

"------------------
" Syntax and indent
"------------------
syntax on " turn on syntax highlighting
set showmatch " show matching braces when text indicator is over them

" highlight current line, but only in active window
augroup CursorLineOnlyInActiveWindow
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END

if &t_Co < 256
    colorscheme default
    set nocursorline " looks bad in this mode
else
    set bg=dark
    colorscheme gruvbox
    set termguicolors
    let g:gruvbox_contrast_dark="hard"
endif

filetype plugin indent on " enable file type detection
set autoindent

autocmd Filetype json let g:indentLine_enabled = 0
"---------------------
" Basic editing config
"---------------------
set shortmess+=I " disable startup message
set nu " number lines
set rnu " relative line numbering
set incsearch " incremental search (as string is being typed)
set hls " highlight search
set lbr " line break
set scrolloff=5 " show lines above and below cursor (when possible)
set showmode " show mode
set laststatus=2
set backspace=indent,eol,start " allow backspacing over everything
set timeout timeoutlen=1000 ttimeoutlen=100 " fix slow O inserts
set lazyredraw " skip redrawing screen in some cases
set autochdir " automatically set current directory to directory of last opened file
set hidden " allow auto-hiding of edited buffers
set history=8192 " more history
set nojoinspaces " suppress inserting two spaces between sentences
" use 4 spaces instead of tabs during formatting
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
" smart case-sensitive search
set ignorecase
set smartcase
" tab completion for files/bufferss
set wildmode=longest,list
set wildmenu
set mouse+=a " enable mouse mode (scrolling, selection, etc)
if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif

"--------------------
" Misc configurations
"--------------------

" unbind keys
map <C-a> <Nop>
map <C-x> <Nop>
nmap Q <Nop>

" disable audible bell
set noerrorbells visualbell t_vb=

" open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" movement relative to display lines
nnoremap <silent> <Leader>d :call ToggleMovementByDisplayLines()<CR>
function SetMovementByDisplayLines()
    noremap <buffer> <silent> <expr> k v:count ? 'k' : 'gk'
    noremap <buffer> <silent> <expr> j v:count ? 'j' : 'gj'
    noremap <buffer> <silent> 0 g0
    noremap <buffer> <silent> $ g$
endfunction
function ToggleMovementByDisplayLines()
    if !exists('b:movement_by_display_lines')
        let b:movement_by_display_lines = 0
    endif
    if b:movement_by_display_lines
        let b:movement_by_display_lines = 0
        silent! nunmap <buffer> k
        silent! nunmap <buffer> j
        silent! nunmap <buffer> 0
        silent! nunmap <buffer> $
    else
        let b:movement_by_display_lines = 1
        call SetMovementByDisplayLines()
    endif
endfunction

" toggle relative numbering
nnoremap <C-n> :set rnu!<CR>

" save read-only files
command -nargs=0 Sudow w !sudo tee % >/dev/null

"---------------------
" Local customizations
"---------------------

" local customizations in ~/.vimrc_local
let $LOCALFILE=expand("~/.vimrc_local")
if filereadable($LOCALFILE)
    source $LOCALFILE
endif

